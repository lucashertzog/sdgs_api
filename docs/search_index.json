[["index.html", "Sustainable Development Indicators in the R programming language 1 Welcome 1.1 Context 1.2 Training Objectives 1.3 Introductions", " Sustainable Development Indicators in the R programming language Dr Lucas Hertzog 2024-07-01 1 Welcome Welcome to the course on Sustainable Development Indicators in R. This book provides all the necessary materials and instructions. 1.1 Context Ocean accounting provides comprehensive indicators of mainstream ocean contributions to society, and the SDG indicators can be used as a starting point for highlighting gaps. Identify which indicators are available in the context of the country. Transboundary cooperation (starting point looking at other countries) Open and freely accessible data. 1.2 Training Objectives Learn to extract, clean, and analyse UN Global SDG Database data using R and the UN SDG API. Provide foundational knowledge on interacting with GitHub using R within the workshop context. Enable participants to build indicators informed by global standards but tailored to their specific contexts. 1.3 Introductions What is a sociologist doing here? My areas of interest are 1) sociology and public health, 2) hacking and statistics, and 3) climate change and sustainable transitions. The Data Science Venn Diagram Participants’ names, organisations, and where they stand in the Venn Diagram. Data Science Venn diagram: http://drewconway.com/zia/2013/3/26/the-data-science-venn-diagram "],["setup.html", "2 Setup 2.1 Windows users 2.2 Mac users", " 2 Setup 2.1 Windows users Download and install R: https://cran.r-project.org/bin/windows/base/R-4.4.1-win.exe Download and install RStudio: https://download1.rstudio.org/electron/windows/RStudio-2024.04.2-764.exe Download and install Git: https://github.com/git-for-windows/git/releases/download/v2.45.2.windows.1/Git-2.45.2-64-bit.exe 2.1.1 Create a GitHub account (sign up) https://github.com/ 2.1.2 Setup Git in RStudio 2.2 Mac users Download and install R: https://cloud.r-project.org/bin/macosx/big-sur-arm64/base/R-4.4.1-arm64.pkg Download and install RStudio: https://download1.rstudio.org/electron/macos/RStudio-2024.04.2-764.dmg Download and install Homebrew: Option 1: https://github.com/Homebrew/brew/releases/download/4.3.7/Homebrew-4.3.7.pkg OR Option 2: Paste that in a macOS Terminal: /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; Install Git using Homebrew Open the Terminal application. You can find it by searching for “Terminal” in Spotlight (Cmd + Space) or by navigating to Applications -&gt; Utilities -&gt; Terminal. In the Terminal, type the following command and press Enter: brew install git 2.2.1 Create a GitHub account (sign up) https://github.com/ "],["github.html", "3 GitHub 3.1 Git and RStudio interaction", " 3 GitHub GitHub is a developer platform that allows developers to create, store, manage and share their code. Why GitHub? Challenges associated with Data Management: sharing data and code. Simultaneous users working on the same project. Sharing work in various programming languages. 3.1 Git and RStudio interaction We can connect Git and RStudio and share our work without leaving the RStudio environment. After installing R, RStudio, and Git and setting up an account on GitHub, it’s time to enable version control for RStudio Projects. 3.1.1 Enable version control Tools&gt;Global Options… For MacOS, it is typically /usr/local/bin/git GIT/SVN 3.1.2 Start a new project New project Choose version control Choose Git Copy the projects’ link Insert link, check name and where to save in your computer. Click Create Project "],["global-sdg-indicators-database-and-metadata-repository.html", "4 Global SDG Indicators Database and Metadata Repository", " 4 Global SDG Indicators Database and Metadata Repository Select relevant Series Codes or Indicators (in case we won’t want to work with the whole series): https://unstats.un.org/sdgs/indicators/SDG_Updateinfo.xlsx "],["api-web-interface.html", "5 API Web Interface", " 5 API Web Interface https://unstats.un.org/sdgapi/swagger/ Let’s find and select the indicator:“POST /v1/sdg/Goal/DataCSV” "],["the-pipeline.html", "6 The pipeline 6.1 Essential data management and folder structure 6.2 config.R 6.3 run.R 6.4 do_get_sdg_api 6.5 do_clean 6.6 do_tab_country 6.7 do_plot 6.8 do_map", " 6 The pipeline RStudio Environment. Let’s rearrange the panel layout: Tools&gt;Global Options… Pane Layout 6.1 Essential data management and folder structure ├── config.R ├── data_derived │ ├── Australia_SDG_14.csv │ ├── sdg_14.csv │ ├── sdg_14_unclos_map.csv │ └── sdg_3_1_2.csv ├── data_provided │ ├── country-to-region-mapping.csv │ ├── Ocean Accounts Diagnostic Tool_formatted.pdf │ ├── SDG-DSD-Guidelines.pdf │ ├── SDG.xlsx │ └── SDG_Updateinfo.xlsx ├── DatSciTrain_SDGs_API_R.Rproj ├── figures_and_tables │ ├── fig2.png │ └── sdg14_Australia.docx ├── LICENSE ├── R │ ├── do_clean.R │ ├── do_get_sdg_api.R │ ├── do_map.R │ ├── do_plot.R │ └── do_tab_Australia.R ├── README.md └── run.R 6.2 config.R # packages if (!require(data.table)) { install.packages(&quot;data.table&quot;) library(data.table) } if (!require(ggplot2)) { install.packages(&quot;ggplot2&quot;) library(ggplot2) } if (!require(sf)) { install.packages(&quot;sf&quot;) library(sf) } if (!require(RColorBrewer)) { install.packages(&quot;RColorBrewer&quot;) library(RColorBrewer) } if (!require(rnaturalearth)) { install.packages(&quot;rnaturalearth&quot;) library(rnaturalearth) } if (!require(rnaturalearthdata)) { install.packages(&quot;rnaturalearthdata&quot;) library(rnaturalearthdata) } ## set folder names folder_names &lt;- c(&quot;data_derived&quot;, &quot;data_provided&quot;, &quot;figures_and_tables&quot;) for (folder_name in folder_names) { if (!dir.exists(folder_name)) { dir.create(folder_name) cat(&quot;Folder&quot;, folder_name, &quot;created.\\n&quot;) } else { cat(&quot;Folder&quot;, folder_name, &quot;already exists.\\n&quot;) } } ## source functions file_list &lt;- list.files(path = &quot;R&quot;, pattern = &quot;\\\\.R$&quot;, full.names = TRUE) # Source each .R file for (file in file_list) { source(file) } 6.3 run.R source(&quot;config.R&quot;) ### 1. Download #### # Use the function to download SDGs data do_get_sdg_api() ### 2. Data cleaning #### # Function to clean the data downloaded indat &lt;- do_clean() ### 3. Tabulating #### tab &lt;- do_tab_country(indat, country = &quot;Indonesia&quot;) ### 4. Visualise #### # Generate and interactive plot with the data cleaned do_plot() ### 5. Map #### do_map() 6.4 do_get_sdg_api do_get_sdg_api &lt;- function( output = &quot;data_derived/sdg_14.csv&quot; ){ # (Client URL) command line tool that enables data exchange between a device # and a server through a terminal curl &lt;- paste0( &#39;curl -X POST --header &quot;Content-Type: application/x-www-form-urlencoded&quot; &#39;, &#39;--header &quot;Accept: application/octet-stream&quot; &#39;, &#39;-d &quot;goal=14&quot; &#39;, &#39;&quot;https://unstats.un.org/sdgapi/v1/sdg/Goal/DataCSV&quot; -o&#39;, output) # Execute cURL system(curl) } 6.5 do_clean do_clean &lt;- function() { # options(scipen = 1000) # Load data indat &lt;- fread(file.path(&quot;data_derived&quot;, &quot;sdg_14.csv&quot;)) # mapping &lt;- fread(file.path(&quot;data_provided&quot;, &quot;country-to-region-mapping.csv&quot;)) # Keep only the values that are either blank or &#39;A&#39; under &#39;Observation Status&#39;, drop the rest indat &lt;- indat[`[Observation Status]` == &quot;&quot; | `[Observation Status]` == &quot;A&quot;] # Replace &#39;-&#39; with &#39;_&#39; across all disaggregation values cols_to_replace &lt;- grep(&quot;\\\\[.*\\\\]&quot;, names(indat), value = TRUE) indat[, (cols_to_replace) := lapply(.SD, function(x) gsub(&quot;-&quot;, &quot;_&quot;, x)), .SDcols = cols_to_replace] return(indat) } 6.6 do_tab_country do_tab_country &lt;- function( indat, country ){ # Filter the input data for the specified country foo &lt;- indat[GeoAreaName == country] # Select specific columns from the filtered data foo14 &lt;- foo[, .(Indicator, SeriesDescription, TimePeriod, Source)] # Convert TimePeriod column to numeric for easier calculations foo14[, NumericTimePeriod := as.numeric(TimePeriod)] # Calculate min and max year for each SeriesDescription using TimePeriod time_ranges &lt;- foo14[, .( StartYear = min(NumericTimePeriod, na.rm = TRUE), EndYear = max(NumericTimePeriod, na.rm = TRUE) ), by = SeriesDescription] # Create a time range string (e.g., &quot;2000-2020&quot; or &quot;2000&quot; if start and end year are the same) time_ranges[, TimeRange := ifelse(StartYear == EndYear, as.character(StartYear), paste(StartYear, EndYear, sep = &quot;-&quot;))] # Merge the new time range back to the main data.table foo14 &lt;- merge(foo14, time_ranges, by = &quot;SeriesDescription&quot;, all.x = TRUE) # Drop temporary columns that are no longer needed foo14[, NumericTimePeriod := NULL] foo14[, StartYear := NULL] foo14[, EndYear := NULL] foo14[, TimePeriod := NULL] # Keep unique rows based on SeriesDescription unq &lt;- unique(foo14, by = &quot;SeriesDescription&quot;) # Select the final columns to include in the output unq &lt;- unq[, .(Indicator, SeriesDescription, TimeRange, Source)] # Define the output file name based on the country out_name &lt;- paste0(&quot;data_derived/&quot;, country, &quot;_SDG_14.csv&quot;) # Write the data to a CSV file fwrite(unq, out_name) return(unq) } 6.7 do_plot do_plot &lt;- function(){ # Subset the data to only include rows where the Indicator is &quot;14.7.1&quot; sdg1471 &lt;- indat[Indicator==&quot;14.7.1&quot;] # Order the subsetted data by GeoAreaName in ascending order sdg1471 &lt;- sdg1471[order(sdg1471$GeoAreaName, decreasing = FALSE)] # Display the unique GeoAreaNames in the subsetted and ordered data unique(sdg1471$GeoAreaName) # Further subset the data to only include rows where the GeoAreaName is &quot;Indonesia&quot; sdg1471_ind &lt;- sdg1471[GeoAreaName==&quot;Indonesia&quot;] # Let&#39;s make a simple plot using base R plot( sdg1471_ind$TimePeriod, sdg1471_ind$Value ) # Some improvements: # type = &quot;l&quot; # col = &quot;blue&quot; # lwd = 2 # main = &quot;Sustainable Fisheries as a proportion of GDP in Indonesia&quot; # xlab = &quot;Year&quot; # ylab = &quot;(%)&quot; # Comparing Indonesia with other countries, subsetting first sdg1471_comp &lt;- sdg1471[GeoAreaName %in% c(&quot;Indonesia&quot;, &quot;Malaysia&quot;, &quot;Cook Islands&quot;)] # Create the plot using ggplot2 ggplot(sdg1471_comp, aes(x = TimePeriod, y = Value, color = GeoAreaName, group = GeoAreaName)) + geom_line(size = 1.2) + labs(title = &quot;Sustainable Fisheries as a proportion of GDP&quot;, x = &quot;Year&quot;, y = &quot;(%)&quot;, color = &quot;Country&quot;) + theme_minimal() # Include world averages for comparison sdg1471_comp_two &lt;- sdg1471[GeoAreaName %in% c(&quot;Indonesia&quot;, &quot;Malaysia&quot;, &quot;Cook Islands&quot;, &quot;World&quot;)] # Create the plot using ggplot2 p &lt;- ggplot(sdg1471_comp_two, aes(x = TimePeriod, y = Value, color = GeoAreaName, group = GeoAreaName)) + geom_line(size = 1.2) + labs(title = &quot;Sustainable Fisheries as a proportion of GDP (including World average)&quot;, x = &quot;Year&quot;, y = &quot;(%)&quot;, color = &quot;Country&quot;) + theme_minimal() return(p) } 6.8 do_map do_map &lt;- function() { # United Nations Convention on the Law of the Sea (UNCLOS) # Indicator 14.c.1: Number of countries making progress in ratifying, # accepting and implementing through legal, policy and institutional frameworks, # ocean-related instruments that implement international law, as reflected in # the United Nations Convention on the Law of the Sea, for the conservation and # sustainable use of the oceans and their resources foo &lt;- indat[SeriesCode == &quot;ER_UNCLOS_RATACC&quot; | SeriesCode == &quot;ER_UNCLOS_IMPLE&quot;] foo1 &lt;- foo[SeriesCode == &quot;ER_UNCLOS_RATACC&quot;, .SD[which.max(as.numeric(TimePeriod))], by = GeoAreaName] foo2&lt;- foo[SeriesCode == &quot;ER_UNCLOS_IMPLE&quot;, .SD[which.max(as.numeric(TimePeriod))], by = GeoAreaName] # Get country polygons world &lt;- rnaturalearth::ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) setnames(foo1, &quot;GeoAreaName&quot;, &quot;name&quot;) setnames(foo2, &quot;GeoAreaName&quot;, &quot;name&quot;) foo2_names &lt;- unique(foo2$name) foo1_names &lt;- unique(foo1$name) world_names &lt;- unique(world$name) names_diff_foo2_world &lt;- setdiff(foo2_names, world_names) names_diff_foo1_world &lt;- setdiff(foo1_names, world_names) print(&quot;Names in foo2 not in world:&quot;) print(names_diff_foo2_world) print(names_diff_foo1_world) foo2[name == &quot;Republic of Korea&quot;, name := &quot;South Korea&quot;] foo2[name == &quot;United Kingdom of Great Britain and Northern Ireland&quot;, name := &quot;United Kingdom&quot;] foo2[name == &quot;Russian Federation&quot;, name := &quot;Russia&quot;] foo2[name == &quot;Venezuela (Bolivarian Republic of)&quot;, name := &quot;Venezuela&quot;] foo1[name == &quot;Republic of Korea&quot;, name := &quot;South Korea&quot;] foo1[name == &quot;United Kingdom of Great Britain and Northern Ireland&quot;, name := &quot;United Kingdom&quot;] foo1[name == &quot;Russian Federation&quot;, name := &quot;Russia&quot;] foo1[name == &quot;Venezuela (Bolivarian Republic of)&quot;, name := &quot;Venezuela&quot;] foo2_imple &lt;- foo2[SeriesCode == &quot;ER_UNCLOS_IMPLE&quot;] foo1_rat &lt;- foo1[SeriesCode == &quot;ER_UNCLOS_RATACC&quot;] foo3 &lt;- rbind(foo2_imple, foo1_rat) foo3_map &lt;- merge(world, foo3, by = &quot;name&quot;, all.x = TRUE, fill = TRUE) setDT(foo3_map) # Replace NaN and NA in &#39;Value&#39; with NA for uniform handling foo3_map[, Value := fifelse(is.nan(Value) | is.na(Value), as.numeric(NA), Value)] foo3_map[, ValueFactor := cut(Value, breaks = c(0, 50, 69, 79, 89, 100), include.lowest = TRUE, right = TRUE, labels = c(&quot;0-50%&quot;, &quot;51-69%&quot;, &quot;70-79%&quot;, &quot;80-89%&quot;, &quot;90-100%&quot;))] foo4 &lt;- foo3_map[!is.na(foo3_map$Value)] foo5 &lt;- foo4[, c(&quot;name&quot;, &quot;Value&quot;, &quot;Indicator&quot;, &quot;TimePeriod&quot;, &quot;SeriesDescription&quot;), drop = FALSE] write.csv(foo5, &quot;data_derived/sdg_14_unclos_map.csv&quot;, row.names = FALSE) foo3_map &lt;- st_as_sf(foo3_map) equal_earth_projection &lt;- st_crs(&quot;+proj=eqearth +datum=WGS84&quot;) p &lt;- ggplot(data = foo3_map) + geom_sf(aes(geometry = geometry, fill = ValueFactor), color = &quot;white&quot;, size = 0.2) + scale_fill_brewer(palette = &quot;YlGnBu&quot;, name = &quot;&quot;, na.value = &quot;grey&quot;) + coord_sf(crs = equal_earth_projection, datum = NA) + # Apply Equal Earth projection theme( panel.background = element_rect(fill = &quot;white&quot;), legend.position = &quot;top&quot; ) ggsave(&quot;figures_and_tables/fig_map.png&quot;, plot = p, width = 10, height = 6, dpi = 300, units = &quot;in&quot;) } "],["useful-links-and-resources.html", "7 Useful links and resources", " 7 Useful links and resources United Nations Statistics Division SDG API: https://unstats.un.org/sdgapi/swagger/ Global SDG Indicators Database and Metadata Repository: https://unstats.un.org/sdgs/indicators/SDG_Updateinfo.xlsx Data Structure Definitions (IAEG-SDGs): https://registry.sdmx.org/data/datastructure.html Standard country or area codes for statistical use (M49): https://unstats.un.org/unsd/methodology/m49/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
